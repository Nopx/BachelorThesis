package JolleeB.BachelorT.Algorithmen;

import java.util.Random;

import JolleeB.BachelorT.Utils.Conversion;
import JolleeB.BachelorT.Utils.ImageFormatingUtils;
import JolleeB.BachelorT.Utils.ImageUtils;

public class GMMAnalyzerHSV {
	private int imgLength;
	private float learningRate = 0.01f;
	private float[] mean;
	private float[] variance;
	
	public GMMAnalyzerHSV(int imgLength){
		this.imgLength = imgLength;
		this.mean = new float[imgLength];
		this.variance = new float[imgLength];
		for(int i =0; i <imgLength; i++){
			this.mean[i] = 0;
			this.variance[i] = 3;
		}
	}
	
	public byte[] convertImage(byte[] imgIn){
		if(imgIn.length != imgLength) throw new IllegalArgumentException();
		byte[] imgInClone = ImageFormatingUtils.makeGrayScaleImage(imgIn);
		int length = this.imgLength/3;
		byte[] imgOut = new byte[length];
		for(int i = 0; i <length; i++){
			int x = Conversion.byteToInt(imgInClone[i]);
			boolean isForeground = Math.abs(x-mean[i])>variance[i];
			
			//Update Pixel in new Picture
			if(isForeground) imgOut[i] = 0;	
			else imgOut[i] = -1;
		}
		imgOut = ImageUtils.medianFilter(imgOut, 864, 480, 3);
		imgOut = ImageFormatingUtils.makeColorScale(imgOut);
		for(int i =0; i < imgLength; i++){
			int x = Conversion.byteToInt(imgIn[i]);
			
			//Update mean and variance values
			mean[i] = mean[i] * (1-learningRate) + (learningRate * x);
			variance[i] = (float)Math.sqrt(variance[i] * (1-learningRate) + (learningRate *(x-mean[i])*(x-mean[i])));
			
			if(imgOut[i] ==0) imgOut[i]=(byte)mean[i];
			else imgOut[i] = imgIn[i];
		}
		return imgOut;
	}
	
}