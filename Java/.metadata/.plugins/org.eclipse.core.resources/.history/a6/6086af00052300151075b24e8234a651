package JolleeB.BachelorT.Utils;

import java.awt.Point;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.util.ArrayList;
import java.util.Arrays;

public class VideoUtils {
	
	public static final int PREPROC_AVG = 1;
	public static final int PREPROC_MEDIAN = 2;
	public static final int PREPROC_MIN = 3;
	public static final int PREPROC_MAX = 4;

	
	public static ArrayList<BufferedImage> medianByWindow(ArrayList<BufferedImage> imgsIn, int windowSize){
		int width = imgsIn.get(0).getWidth();
		int height = imgsIn.get(0).getHeight();
		ArrayList<BufferedImage> imgsOut = new ArrayList<BufferedImage>();
		final byte[][] pixVidIn = new byte[imgsIn.size()][width*height];
		byte[][] pixVidOut;
		for(int i = 0; i < imgsIn.size(); i++){
			BufferedImage bi = imgsIn.get(i);
			pixVidIn[i] = ((DataBufferByte)bi.getRaster().getDataBuffer()).getData();
		}
		pixVidOut = medianByWindow(pixVidIn, windowSize);
		
		for(int i = 0; i < pixVidOut.length; i++){
			ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
	        DataBuffer dataBuf = new DataBufferByte(pixVidOut[i], pixVidOut[i].length);
	        WritableRaster raster = Raster.createInterleavedRaster(dataBuf, width, height,width*3, 3, new int[]{2, 1, 0}, new Point());
	        //true oder false macht keinen unterschied hier?????!
			imgsOut.add(i, new BufferedImage(cm, raster, false, null));
		}
		return imgsOut;
	}
	
	public static int[][] getDerivative(byte[][] imgsIn){
		int length = imgsIn[0].length;
		int time = imgsIn.length;
		int[][] imgsOut = new int[time][length];
		for(int t = 0; t < time-1; t++){
			imgsOut[t] = ImageUtils.subtractGrayScaleImgByte(imgsIn[t], imgsIn[t+1]);
		}
		return imgsOut;
	}
	
	public static byte[][] getAntiderivative(int[][] imgsIn, byte[] initImage){
		int length = imgsIn[0].length;
		int time = imgsIn.length;
		byte[][] imgsOut = new byte[time][length];
		imgsOut[0] = initImage;
		for(int t = 0; t < time; t ++){
			if(t>0)
				for(int i = 0; i < length; i++){
					byte val = (byte)(imgsIn[t][i] + imgsOut[t-1][i]);
					if(val>255)val=(byte)255;
					if(val<0)val=0;
					imgsOut[t][i] = val;
				}
		}
		return imgsOut;
	}
	
	public static byte[][] arrayListToByteArray(ArrayList<BufferedImage> framesInput){
		int width = framesInput.get(0).getWidth();
		int height = framesInput.get(0).getHeight();
		
		final byte[][] pixVidIn = new byte[framesInput.size()][width*height];
		final byte[][] pixVidOut;
		
		
		
		System.out.println("Extracting pixels..");
		for(int i = 0; i < framesInput.size(); i++){
			BufferedImage bi = framesInput.get(i);
			pixVidIn[i] = ((DataBufferByte)bi.getRaster().getDataBuffer()).getData();
		}
		return pixVidIn;
	}
	
	public static ArrayList<BufferedImage> byteArrayToArrayList(byte[][] pixVidIn, int width, int height){
		ArrayList<BufferedImage> framesOutput = new ArrayList<BufferedImage>();
		for(int i = 0; i < pixVidIn.length; i++){
			ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
	        DataBuffer dataBuf = new DataBufferByte(pixVidIn[i], pixVidIn[i].length);
	        WritableRaster raster = Raster.createInterleavedRaster(dataBuf, width, height,width*3, 3, new int[]{2, 1, 0}, new Point());
	        //true oder false macht keinen unterschied hier?????!
			framesOutput.add( new BufferedImage(cm, raster, false, null));
		}
		return framesOutput;
	}
	
	public static byte[][] medianByWindow(byte[][] imgsIn, int windowSize){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[][] imgsOut = new byte[time][length];
		int windowMiddle = (int)Math.floorDiv(windowSize, 2);
		if(length<windowSize)throw new IllegalArgumentException();
		byte[][] window = new byte[windowSize][length];
		for(int v = 0; v<time; v ++){
			for(int w = 0; w< windowSize; w++){
				int index = Math.abs(v+w-windowMiddle);
				if(index >= time) index = 2*(time-1)-index;
				window[w] = imgsIn[index];
			}
			imgsOut[v] = localMedian(window);
		}
		return imgsOut;
	}
	
	public static ArrayList<BufferedImage> avgByWindow(ArrayList<BufferedImage> imgsIn, int windowSize){
		int width = imgsIn.get(0).getWidth();
		int height = imgsIn.get(0).getHeight();
		ArrayList<BufferedImage> imgsOut = new ArrayList<BufferedImage>();
		final byte[][] pixVidIn = new byte[imgsIn.size()][width*height];
		byte[][] pixVidOut;
		for(int i = 0; i < imgsIn.size(); i++){
			BufferedImage bi = imgsIn.get(i);
			pixVidIn[i] = ((DataBufferByte)bi.getRaster().getDataBuffer()).getData();
		}
		pixVidOut = avgByWindow(pixVidIn, windowSize);
		
		for(int i = 0; i < pixVidOut.length; i++){
			ColorModel cm = new ComponentColorModel(ColorModel.getRGBdefault().getColorSpace(), false, true, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
	        DataBuffer dataBuf = new DataBufferByte(pixVidOut[i], pixVidOut[i].length);
	        WritableRaster raster = Raster.createInterleavedRaster(dataBuf, width, height,width*3, 3, new int[]{2, 1, 0}, new Point());
	        //true oder false macht keinen unterschied hier?????!
			imgsOut.add(i, new BufferedImage(cm, raster, false, null));
		}
		return imgsOut;
	}
	
	public static byte[][] avgByWindow(byte[][] imgsIn, int windowSize){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[][] imgsOut = new byte[time][length];
		int windowMiddle = (int)Math.floorDiv(windowSize, 2);
		if(length<windowSize)throw new IllegalArgumentException();
		byte[][] window = new byte[windowSize][length];
		for(int v = 0; v<time; v ++){
			for(int w = 0; w< windowSize; w++){
				int index = Math.abs(v+w-windowMiddle);
				if(index >= time) index = 2*(time-1)-index;
				window[w] = imgsIn[index];
			}
			imgsOut[v] = localAvg(window);
		}
		return imgsOut;
	}
	
	public static int[] avgIntImage(byte[][] imgsIn){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		int[] imgOut = new int[length];
		for(int v = 0; v<time; v ++){
			imgOut = ImageUtils.addGrayScaleImgInt(imgsIn[v], imgOut);
		}
		return ImageUtils.divideIntImageBy(time, imgOut);
	}
	
	public static byte[][] gauss(byte[][] imgsIn , int kernelSize, double sigma,int imgWidth, int imgHeight){
		int time = imgsIn.length;
		byte[][] imgsOut = new byte[time][imgsIn[0].length];
		for(int t = 0; t < time ; t++){
			imgsOut[t] = ImageUtils.gaussGrayScaleToByte(imgsIn[t], imgWidth, imgHeight, kernelSize, sigma);
		}
		return imgsOut;
	}
	
	public static byte[] avgByteImage(byte[][] imgsIn){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		int[] imgOut = new int[length];
		for(int v = 0; v<time; v ++){
			imgOut = ImageUtils.addGrayScaleImgInt(imgsIn[v], imgOut);
		}
		return ImageFormatingUtils.scaleIntToByteArray(ImageUtils.divideIntImageBy(time, imgOut));
	}
	
	public static byte[] singleFramePerPixelVarianz(byte[] imgIn, byte[] imgAvg, int offset){
		int length = imgIn.length;
		byte[] imgOut = new byte[length];
		for(int i = 0; i< length; i++){
			int value = (Math.abs(imgIn[i] - imgAvg[i])+offset);
			if(value<0)value =0;
			if(value>255)value=255;
			imgOut[i] = (byte)value;
		}
		return imgOut;
	}
	
	public static byte[][] absoluteFramePerPixelVarianz(byte[][] imgsIn, byte[] avgImage, int offset){
		int length = imgsIn[0].length;
		int time = imgsIn.length;
		byte[][] imgsOut = new byte[time][length];
		if(length != avgImage.length) throw new IllegalArgumentException();
		for(int t = 0; t < time; t ++){
			for(int i = 0; i< length; i++){
				int value = (Math.abs(imgsIn[t][i] - avgImage[i])+offset);
				if(value<0)value =0;
				if(value>255)value=255;
				imgsOut[t][i] = (byte)value;
			}
		}
		return imgsOut;
	}
	public static byte[] localRandom(byte[][] imgsIn){
		java.util.Random r = new java.util.Random();
		int Low = 0;
		int High = imgsIn.length;
		int randomInt = r.nextInt(High-Low) + Low;
		return imgsIn[randomInt];
	}
	public static byte[] localMedian(byte[][] imgsIn){
		int time = imgsIn.length;
		int timeHalved = (int)Math.floor(time/2);
		int length = imgsIn[imgsIn.length-1].length;
		byte[] imgOut = new byte[length];
		
		for(int i =0; i< length; i++){
			ArrayList<Byte> arr = new ArrayList<Byte>();
			for(int v = 0; v < time; v++){
				if(imgsIn[v] != null)
				arr.add(imgsIn[v][i]);
			}
			Byte[] array = new Byte[arr.size()]; 
			array = arr.toArray(array);
			Arrays.sort(array);
			imgOut[i] = (byte)array[(int)Math.floor(array.length/2)];
		}
		return imgOut;
	}
	
	public static byte[] localMaximum(byte[][] imgsIn){
		int time = imgsIn.length;
		int timeMaxIndex = time-1;
		int length = imgsIn[0].length;
		byte[] imgOut = new byte[length];
		
		
		for(int i =0; i< length; i++){
			byte[] arr = new byte[time];
			for(int v = 0; v < time; v++){
				arr[v] = imgsIn[v][i];
			}
			Arrays.sort(arr);
			imgOut[i] = arr[timeMaxIndex];
		}
		return imgOut;
	}
	
	public static byte[] localAvg(byte[][] imgsIn){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[] imgOut = new byte[length];
		
		for(int i =0; i< length; i++){
			int avg = 0;
			for(int v = 0; v < time; v++){
				avg += imgsIn[v][i];
			}
			imgOut[i] = (byte)(avg/time);
		}
		return imgOut;
	}
	
	public static float[] localAvgToFloat(byte[][] imgsIn){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		float[] imgOut = new float[length];
		
		for(int i =0; i< length; i++){
			int avg = 0;
			for(int v = 0; v < time; v++){
				avg += Conversion.byteToInt(imgsIn[v][i]);
			}
			imgOut[i] = (avg/time);
		}
		return imgOut;
	}
	
	public static float[] localVariance(byte[][] imgsIn, byte[] avgs){
		if(imgsIn[0].length != avgs.length) throw new IllegalArgumentException();
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		float[] imgOut = new float[length];
		
		for(int i =0; i< length; i++){
			float variance = 0;
			for(int v = 0; v < time; v++){
				variance += (float)Math.abs(imgsIn[v][i]-Conversion.byteToInt(avgs[i]));
			}
			imgOut[i] = (float)(variance/time);
		}
		return imgOut;
	}
	
	public static byte[] localDerivative(byte[][] imgsIn){
		int time = imgsIn.length;
		return ImageUtils.subtractGrayScaleImgByteToByte(imgsIn[time-1], imgsIn[time-2], 0);
	}
	
	public static byte[] localClosestToAvg(byte[][] imgsIn){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[] imgOut = new byte[length];
		
		for(int i =0; i< length; i++){
			int avg = 0;
			int[] arr = new int[time];
			for(int v = 0; v < time; v++){
				avg += imgsIn[v][i];
				arr[v] = imgsIn[v][i];
			}
			for(int v = 0; v < time; v++){
				arr[v]-=avg;
			}
			Arrays.sort(arr);
			imgOut[i] = (byte)(arr[0]+avg);
		}
		return imgOut;
	}

	public static byte[][] makeColorScale(byte[][] imgsIn) {
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[][] imgsOut = new byte[time][length];
		for( int t = 0; t < time; t++){
			imgsOut[t] = ImageFormatingUtils.makeColorScale(imgsIn[t]);
		}
		return imgsOut;
	}

	public static byte[][] makeGrayScale(byte[][] imgsIn) {
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[][] imgsOut = new byte[time][length];
		for( int t = 0; t < time; t++){
			imgsOut[t] = ImageFormatingUtils.makeGrayScaleImage(imgsIn[t]);
		}
		return imgsOut;
	}
	
	public static byte[][] halveGrayScale(byte[][] imgsIn,int width, int height) {
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[][] imgsOut = new byte[time][length];
		for( int t = 0; t < time; t++){
			imgsOut[t] = ImageFormatingUtils.halveGrayScaleImage(imgsIn[t],width,height);
		}
		return imgsOut;
	}
	
	public static byte[][] doubleGrayScale(byte[][] imgsIn,int width, int height) {
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[][] imgsOut = new byte[time][length];
		for( int t = 0; t < time; t++){
			imgsOut[t] = ImageFormatingUtils.doubleGrayScaleImage(imgsIn[t],width,height);
		}
		return imgsOut;
	}
	
	public static byte[][] decolorColorScale(byte[][] imgsIn){
		int length = imgsIn[0].length/3;
		int time = imgsIn.length;
		byte[][]imgsOut = new byte[time][length*3];
		for(int t = 0; t < time; t++){
			for(int i = 0; i < length; i++){
				byte val1 = imgsIn[t][i*3];
				byte val2 = imgsIn[t][i*3+1];
				byte val3 = imgsIn[t][i*3+2];
				int val1Int = val1<0?val1+255:val1;
				int val2Int = val2<0?val2+255:val2;
				int val3Int = val3<0?val3+255:val3;
				int mixVal = (val1Int+val2Int+val3Int)/3;
				byte val = (byte)mixVal;
				
				imgsOut[t][i*3+0] = val;
				imgsOut[t][i*3+1] = val;
				imgsOut[t][i*3+2] = val;
			}
		}
		return imgsOut;
	}
	
	public static byte[] preAndPostProcessedDerivative(byte[][] imgsIn, int avgAmount, int processingMode, int steps, int width, int height){
		int width2 = width;
		int height2 = height;
		byte[] frame = preprocessedDerivative(imgsIn, avgAmount, processingMode);
		frame = ImageUtils.binaryThresholding(frame, 2);
		frame = ImageUtils.medianFilter(frame, width, height, 5);
		if(steps ==0)
			return frame;
		byte[][] framesSmall = imgsIn.clone();
		for(int i = 0; i <steps; i++){
			framesSmall = VideoUtils.halveGrayScale(framesSmall, width2, height2);
			width2 = Math.floorDiv(width2, 2);
			height2 = Math.floorDiv(height2, 2);
		}
		byte[] frameSmall = preprocessedDerivative(framesSmall, avgAmount, processingMode);
		for(int i = 0; i <steps; i++){
			frameSmall = ImageFormatingUtils.doubleGrayScaleImage(frameSmall, width2, height2);
			width2 *=2;
			height2 *=2;
		}
		frameSmall = ImageUtils.binaryThresholding(frameSmall, 1);
		frameSmall = ImageUtils.maximumFilter(frameSmall, width2, height2, 5);
		frameSmall = ImageUtils.dilateBinary(frameSmall, width2, height2, 10);
		byte[] imgOut = ImageUtils.simpleBinaryMask(frame, width, height, frameSmall, width2, height2);
		imgOut = ImageUtils.eroseBinary(imgOut, width, height, 1);
//		imgOut = ImageUtils.dilateBinary(imgOut, width, height, 100);
		return frameSmall; 
	}
	
	public static byte[] preprocessedDerivative(byte[][] imgsIn, int avgAmount, int processingMode){
		int time = imgsIn.length;
		int length = imgsIn[0].length;
		byte[] img1 = new byte[length];
		byte[] img2 = new byte[length];
		
		switch(processingMode){
			case PREPROC_AVG:
				for(int i = 0; i < length; i++){
					int val1 = 0;
					int val2 = 0;
					for(int v =0; v<avgAmount; v++){
						val1 += Conversion.byteToInt(imgsIn[v+time-avgAmount-1][i]);
						val2 += Conversion.byteToInt(imgsIn[v+time-avgAmount][i]);
					}
					val1 /= avgAmount;
					val2 /= avgAmount;
					img1[i] = (byte)val1;
					img2[i] = (byte)val2;
				}
				break;
			case PREPROC_MIN:
			case PREPROC_MAX:
			case PREPROC_MEDIAN:
				for(int i = 0; i < length; i++){
					byte[] vals1 = new byte[avgAmount];
					byte[] vals2 = new byte[avgAmount];
					for(int v =0; v<avgAmount; v++){
						vals1[v]= imgsIn[v+time-avgAmount-1][i];
						vals2[v]= imgsIn[v+time-avgAmount][i];
					}
					Arrays.sort(vals1);
					Arrays.sort(vals2);
					switch(processingMode){
						case PREPROC_MIN:
							img1[i] = vals1[vals1.length-1];
							img2[i] = vals2[vals2.length-1];
							break;
						case PREPROC_MEDIAN:
							img1[i] = vals1[vals1.length/2];
							img2[i] = vals2[vals2.length/2];
							break;
						case PREPROC_MAX:
							img1[i] = vals1[0];
							img2[i] = vals2[0];
							break;
					}
				}
				break;
		}
		
		return ImageUtils.subtractGrayScaleImgByteToByte(img1, img2, 0);
	}
}
